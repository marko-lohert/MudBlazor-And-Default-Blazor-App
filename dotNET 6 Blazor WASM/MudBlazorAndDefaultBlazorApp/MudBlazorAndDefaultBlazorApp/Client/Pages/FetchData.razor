@page "/fetchdata"
@using MudBlazorAndDefaultBlazorApp.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3">Weather forecast</MudText>

<MudText Typo="Typo.body1">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudTable Items="@forecasts" SortLabel="SortBy" Hover="true" Elevation="5">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x => x.Summary)">Summary</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date.ToShortDateString()</MudTd>
                    <MudTd>@context.TemperatureC</MudTd>
                    <MudTd>@context.TemperatureF</MudTd>
                    <MudTd>@context.Summary</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>

    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" ChartOptions="@ChartOptions" LegendPosition="Position.Right" Width="570px" Height="570px" />
}

@code {
    private WeatherForecast[]? forecasts;

    List<ChartSeries> Series = new();
    ChartOptions ChartOptions = new();

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        Series.Add(new ChartSeries()
            {
                Name = "Temp. (C)",
                Data = forecasts?.Select<WeatherForecast, double>(x => x.TemperatureC).ToArray()
            });
        Series.Add(new ChartSeries()
            {
                Name = "Temp. (F)",
                Data = forecasts?.Select<WeatherForecast, double>(x => x.TemperatureF).ToArray()
            });

        ChartOptions.InterpolationOption = InterpolationOption.NaturalSpline;
        ChartOptions.DisableLegend = false;
        ChartOptions.ChartPalette = new string[] { MudBlazor.Colors.Green.Default, MudBlazor.Colors.Red.Default };
    }
}
